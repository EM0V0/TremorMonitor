@page "/trends"
@rendermode InteractiveServer
@using NeuroMotionDemo.Services
@using NeuroMotionDemo.Models
@inject TrendDataService TrendDataService
@inject MqttService MqttService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>NeuroMotion Trends</PageTitle>

<h1>Tremor Data Trends</h1>

<!-- Debug info for troubleshooting -->
<div class="debug-panel">
    <h4>Debug Information (Trends)</h4>
    <p>Available sensors: @string.Join(", ", TrendDataService.GetAvailableSensors())</p>
    <p>Available parameters: @string.Join(", ", TrendDataService.GetAvailableParameters())</p>
    <p>Selected sensors: @string.Join(", ", _selectedSensors)</p>
    <p>Selected parameters: @string.Join(", ", _selectedParameters)</p>
    <p>Last update: @_lastUpdateTime</p>
</div>

<div class="row">
    <div class="col-md-9">
        <div class="card">
            <div class="card-body">
                <h3>Live Trend View</h3>
                @if (GetVisibleSeries().Any())
                {
                    <div id="trend-chart">
                        <TrendChart VisibleSeries="@GetVisibleSeries()" @key="@DateTime.Now.Ticks" />
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        No trend data available yet. Connect to your MQTT broker and select parameters.
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card">
            <div class="card-body">
                <h4>Select Parameters</h4>
                <h5>Sensors</h5>
                @foreach (var sensor in TrendDataService.GetAvailableSensors())
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="@($"sensor_{sensor}")"
                               checked="@_selectedSensors.Contains(sensor)"
                               @onchange="@(e => ToggleSensor(sensor, e.Value != null && (bool)e.Value))" />
                        <label class="form-check-label" for="@($"sensor_{sensor}")">
                            @FormatSensorName(sensor)
                        </label>
                    </div>
                }

                <h5>Metrics</h5>
                @foreach (var param in TrendDataService.GetAvailableParameters())
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="@($"param_{param}")"
                               checked="@_selectedParameters.Contains(param)"
                               @onchange="@(e => ToggleParameter(param, e.Value != null && (bool)e.Value))" />
                        <label class="form-check-label" for="@($"param_{param}")">
                            @FormatParameterName(param)
                        </label>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<string> _selectedSensors = new();
    private List<string> _selectedParameters = new();
    private System.Threading.Timer? _refreshTimer;
    private string _lastUpdateTime = "Never";
    private bool _forceRefresh = false;

    protected override void OnInitialized()
    {
        Console.WriteLine("TrendViewer initialized");

        // Ensure MQTT connection is properly maintained
        MqttService.ReconnectEventHandlers();

        // Subscribe to data updates
        TrendDataService.OnDataUpdate += HandleDataUpdate;

        // Set up more aggressive refresh timer (every 1 second)
        _refreshTimer = new System.Threading.Timer(async _ =>
        {
            _forceRefresh = !_forceRefresh; // Toggle to force re-render
            await InvokeAsync(async () =>
            {
                _lastUpdateTime = DateTime.Now.ToString("HH:mm:ss.fff");
                StateHasChanged();
                await ForceChartRedraw();
            });
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize with data that may already be available
            HandleDataUpdate();

            // Load JavaScript helper
            JSRuntime.InvokeVoidAsync("import", "/_content/NeuroMotionDemo/js/chart-helper.js");
        }
    }

    private Dictionary<string, List<TrendDataPoint>> GetVisibleSeries()
    {
        // Force unique reference each time to ensure component updates
        var result = new Dictionary<string, List<TrendDataPoint>>();

        foreach (var sensor in _selectedSensors)
        {
            foreach (var parameter in _selectedParameters)
            {
                var key = $"{sensor}_{parameter}";
                // Create a NEW list copy to force refresh (important!)
                var data = TrendDataService.GetTrendData(sensor, parameter);

                if (data.Any())
                {
                    result[key] = new List<TrendDataPoint>(data);
                }
            }
        }

        // This unused variable forces re-rendering
        var forcingRefresh = _forceRefresh;

        return result;
    }

    private async void HandleDataUpdate()
    {
        Console.WriteLine("Handling trend data update...");

        // Initialize with some default selections if none yet
        if (!_selectedSensors.Any() && TrendDataService.GetAvailableSensors().Any())
        {
            // Select all available sensors
            _selectedSensors = TrendDataService.GetAvailableSensors().ToList();
            Console.WriteLine($"Default sensors selected: {string.Join(", ", _selectedSensors)}");
        }

        if (!_selectedParameters.Any() && TrendDataService.GetAvailableParameters().Any())
        {
            // Start with just RMS as default parameter
            _selectedParameters = new List<string> { "rms" };
            Console.WriteLine($"Default parameters selected: {string.Join(", ", _selectedParameters)}");
        }

        await RefreshChartAsync();
    }

    private async Task ToggleSensor(string sensor, bool selected)
    {
        if (selected && !_selectedSensors.Contains(sensor))
        {
            _selectedSensors.Add(sensor);
        }
        else if (!selected && _selectedSensors.Contains(sensor))
        {
            _selectedSensors.Remove(sensor);
        }
        await RefreshChartAsync();
    }

    private async Task ToggleParameter(string parameter, bool selected)
    {
        if (selected && !_selectedParameters.Contains(parameter))
        {
            _selectedParameters.Add(parameter);
        }
        else if (!selected && _selectedParameters.Contains(parameter))
        {
            _selectedParameters.Remove(parameter);
        }
        await RefreshChartAsync();
    }

    // New method to refresh chart data
    private async Task RefreshChartAsync()
    {
        _lastUpdateTime = DateTime.Now.ToString("HH:mm:ss.fff");
        await InvokeAsync(StateHasChanged);
    }

    private async Task ForceChartRedraw()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("chartHelper.forceRedraw", "trend-chart");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error forcing chart redraw: {ex.Message}");
        }
    }

    private string FormatSensorName(string name)
    {
        var parts = name.Split('_');
        if (parts.Length >= 2)
        {
            return $"{parts[0]} ({parts[1].ToUpper()})";
        }
        return name.Replace("_", " ");
    }

    private string FormatParameterName(string name)
    {
        switch (name)
        {
            case "rms": return "RMS";
            case "dominant_freq": return "Dominant Frequency";
            case "tremor_power": return "Tremor Power";
            case "tremor_index": return "Tremor Index";
            default: return name.Replace("_", " ");
        }
    }

    public void Dispose()
    {
        // Clean up all resources
        TrendDataService.OnDataUpdate -= HandleDataUpdate;
        _refreshTimer?.Dispose();
        _refreshTimer = null;
    }
}
